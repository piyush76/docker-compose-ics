---
pipeline:
  name: ICS Service Deployment Pipeline
  identifier: ics_service_deployment_pipeline
  projectIdentifier: ics_service_project
  orgIdentifier: default
  tags:
    environment: <+input>
    service: ics-service
  stages:
    - stage:
        name: Database Deployment
        identifier: database_deployment
        description: Deploy Oracle Database for ICS Service
        type: CustomStage
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Prepare Database Environment
                  identifier: prepare_database_environment
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Preparing database deployment environment..."

                          sudo mkdir -p <+pipeline.variables.deployment_path>
                          sudo chown <+pipeline.variables.ssh_user>:<+pipeline.variables.ssh_user> <+pipeline.variables.deployment_path>

                          cd <+pipeline.variables.deployment_path>

                          cat > .env << EOF
                          TCMIS_DB_SECRET=<+secrets.getValue("TCMIS_DB_SECRET")>
                          ORACLE_ROOT_PASSWORD=<+secrets.getValue("ORACLE_ROOT_PASSWORD")>
                          EOF

                          echo "Database environment prepared successfully"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 5m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsFailure
              - step:
                  type: CustomDeployment
                  name: Deploy Oracle Database
                  identifier: deploy_oracle_database
                  spec:
                    customDeploymentRef:
                      templateRef: docker_compose_deployment_template
                      versionLabel: v1.0.0
                    infrastructure:
                      variables:
                        target_host: <+pipeline.variables.target_host>
                        docker_compose_path: <+pipeline.variables.deployment_path>
                        env_file_path: <+pipeline.variables.deployment_path>/.env
                        ssh_user: <+pipeline.variables.ssh_user>
                    execution:
                      steps:
                        - step:
                            type: ShellScript
                            name: Deploy Database Service
                            identifier: deploy_database_service
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: |
                                    echo "Starting Oracle database deployment..."
                                    cd <+pipeline.variables.deployment_path>

                                    docker-compose up -d oracle-db

                                    echo "Waiting for database to be ready..."
                                    sleep 60

                                    bash <+pipeline.variables.deployment_path>/.harness/scripts/health-check.sh oracle
                              environmentVariables: []
                              outputVariables: []
                            timeout: 10m
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: Retry
                                    spec:
                                      retryCount: 2
                                      retryIntervals:
                                        - 2m
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: MarkAsFailure
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: Application Deployment
        identifier: application_deployment
        description: Deploy ICS Service Application
        type: CustomStage
        spec:
          execution:
            steps:
              - step:
                  type: CustomDeployment
                  name: Deploy ICS Service
                  identifier: deploy_ics_service
                  spec:
                    customDeploymentRef:
                      templateRef: docker_compose_deployment_template
                      versionLabel: v1.0.0
                    infrastructure:
                      variables:
                        target_host: <+pipeline.variables.target_host>
                        docker_compose_path: <+pipeline.variables.deployment_path>
                        env_file_path: <+pipeline.variables.deployment_path>/.env
                        ssh_user: <+pipeline.variables.ssh_user>
                    execution:
                      steps:
                        - step:
                            type: ShellScript
                            name: Deploy Application Service
                            identifier: deploy_application_service
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: |
                                    echo "Starting ICS service deployment..."
                                    cd <+pipeline.variables.deployment_path>

                                    docker-compose up -d ics-service

                                    echo "Waiting for application to be ready..."
                                    sleep 45

                                    bash <+pipeline.variables.deployment_path>/.harness/scripts/health-check.sh all
                              environmentVariables: []
                              outputVariables: []
                            timeout: 15m
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: Retry
                                    spec:
                                      retryCount: 2
                                      retryIntervals:
                                        - 3m
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: StageRollback
                        - step:
                            type: ShellScript
                            name: Post Deployment Verification
                            identifier: post_deployment_verification
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: |
                                    echo "Running post-deployment verification..."
                                    cd <+pipeline.variables.deployment_path>

                                    docker-compose ps

                                    echo "Testing application endpoints..."
                                    curl -f http://<+pipeline.variables.target_host>:9091/actuator/health
                                    curl -f http://<+pipeline.variables.target_host>:9090/chemicals/api/actuator/health

                                    echo "Deployment verification completed successfully!"
                              environmentVariables: []
                              outputVariables: []
                            timeout: 5m
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: <+pipeline.stages.database_deployment.status> == "SUCCESS"
  variables:
    - name: target_host
      type: String
      description: Target host for deployment
      required: true
      value: <+input>
    - name: deployment_path
      type: String
      description: Deployment path on target host
      required: true
      value: /opt/ics-service
    - name: ssh_user
      type: String
      description: SSH user for target host
      required: true
      value: ubuntu
    - name: environment
      type: String
      description: Deployment environment
      required: true
      value: <+input>
    - name: image_tag
      type: String
      description: ICS Service image tag
      required: true
      value: <+input>.default(d22e942)
  properties:
    ci:
      codebase:
        connectorRef: <+input>
        repoName: <+input>
        build: <+input>
  notificationRules:
    - name: Deployment Success Notification
      identifier: deployment_success_notification
      pipelineEvents:
        - type: PipelineSuccess
      notificationMethod:
        type: Slack
        spec:
          userGroups: []
          webhookUrl: <+input>
      enabled: true
    - name: Deployment Failure Notification
      identifier: deployment_failure_notification
      pipelineEvents:
        - type: PipelineFailed
      notificationMethod:
        type: Slack
        spec:
          userGroups: []
          webhookUrl: <+input>
      enabled: true
